# ホストの特定
## 1.概　要
- masscanの結果は、IPの列挙やサービスと列挙などを行うことができるが、ターゲットを特定することはできない
  - 例えば、`192.168.1.1`は`port 443`が開いているので、`https`が動いているということまではわかるが、`192.168.1.1`が一体誰なのかはわからない 
- ここでやりたいことは、先のスキャンで列挙したIPアドレスの所有者を特定することである
- 色々やり方があると思うが、ここでは一例として証明書情報を取得することで組織名とドメイン名を取得する2つのテクニックをあげる
  - opensslコマンドを使うテクニック
  - TLS-scanツールを使うテクニック 
- ある意味限定的なやり方ではある

## 2.今回の2つテクニックに共通する基本的な考え方
- Masscanでポート443が開いているオンライン状態のホストを列挙する
- ポート443が開いているということは、SSL/TLSを使っていることがわかる
- つまり、このサーバーに接続するユーザに対してサーバーは自分の証明書を開示することになる
- サーバーの証明書には、国（C）、州（ST）、地域（L）、組織（O）、組織単位（OU）、サーバーのコモンネーム（CN）が示されている
- サーバー証明書を取得できれば、当該ホストの所有者情報を取得することができる
- サーバー証明書を取得しよう！となる

## 3.opensslコマンドを使うテクニック

- **opensslコマンドとは**
  - opensslコマンドは証明書の管理に広く使われるオープンソースツール
  - SSL/TLSプロトコルを利用した安全な通信を実現するためのライブラリとツールセットを提供する
  - 例えば、秘密鍵を生成したり、証明書を生成したりすることができる
  - それらの数ある機能の中で、証明書の情報を確認するオプションがあり、今回はそのオプションを使って情報を取得する
  
- **サーバーのSSL証明書を取得する**
  - 特定のサーバーに接続し、そのSSL証明書を確認する基本的なオプション
  - このコマンドは、サーバーとSSL/TLS接続を確立し、証明書情報を表示する
  - スキャンで列挙したIPを確認していく
```bash
openssl s_client -connect <IP または FQDN>:443
``` 

- **証明書の詳細情報を取得する**
  - **取得した証明書の詳細な情報を表示する**
    - 詳細な情報とは、有効期限や発行者など
  - **次のようにパイプでつなげる**  
    - `-text`オプションは証明書を人間が読める形式で表示する
    - `-noout`オプションは出力に証明書自体を含めないようにする（含める必要があれば外す） 
```bash
openssl s_client -connect <IP または FQDN>:443 | openssl x509 -text -noout
``` 

- **必要な情報だけ抽出する**
  - 証明書の内容は冗長なので必要な情報だけ`grep`で抽出する
  - `grep Subject:`をパイプでつなげると、国（C）、州（ST）、地域（L）、組織（O）、組織単位（OU）、サーバーのコモンネーム（CN）が抽出できる
```bash
openssl s_client -connect <IP または FQDN>:443 | openssl x509 -text -noout | grep Subject:
``` 

## 4.TLS-Scanツールを使うテクニック
